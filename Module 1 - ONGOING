Option Explicit

Sub Refresh()
   ThisWorkbook.Connections(1).Refresh
End Sub

Sub Create_BACKLOG_FOLDER()

    On Error GoTo leave
    MkDir "K:\Logistics\#NEW FOLDER STRUCTURE\4. MATERIAL PLANNING\1. MEMBERS\49_Csabi\HETI_BACKLOG_RIPORT\BACKLOG_XLS_MENTÉSEK\" & Date
    MsgBox "Folder is created.", vbInformation
    Exit Sub
leave:
    MsgBox "Folder already exists.", vbInformation
    
End Sub

Sub GenerateBacklogXLSFiles()

    Dim NewBacklogWB As Workbook
    Dim NewBacklogWS As Worksheet
    Dim besz As Long
    Dim CURRENTWB As Workbook
    Dim CURRENTSHEET As Worksheet
    Dim TableArray As Variant
    Dim r As Long
    Dim c As Long
    Dim row As Long
    
    
    Let row = 2
    Let besz = Sheet2.Range("D1").Value
    Set NewBacklogWB = Workbooks.Add
    Set NewBacklogWS = NewBacklogWB.Sheets(1)
    Set CURRENTWB = ThisWorkbook
    Set CURRENTSHEET = CURRENTWB.Sheets("AX_OPEN_ORDERS_TXT")
    TableArray = CURRENTSHEET.ListObjects("AX_OPEN_ORDERS_TXT").Range
    
    NewBacklogWB.SaveAs ("K:\Logistics\#NEW FOLDER STRUCTURE\4. MATERIAL PLANNING\1. MEMBERS\49_Csabi\HETI_BACKLOG_RIPORT\BACKLOG_XLS_MENTÉSEK\" & Date & "\" & besz & ".xls")
    NewBacklogWS.Name = besz
    NewBacklogWS.Tab.Color = vbRed
    
    With NewBacklogWS
        CURRENTSHEET.ListObjects("AX_OPEN_ORDERS_TXT").HeaderRowRange.Copy Destination:=.Range("A1")
    
        For r = LBound(TableArray, 1) To UBound(TableArray, 1) Step 1
            If TableArray(r, 3) = besz And TableArray(r, 1) = "BACKLOG" Then
                For c = LBound(TableArray, 2) To UBound(TableArray, 2) Step 1
                        .Cells(row, c) = TableArray(r, c)
                Next c
                row = row + 1
            End If
        Next r
        
        .Range("N:S").Delete
        .UsedRange.EntireColumn.AutoFit
    End With
    NewBacklogWB.Close (True)
    
    Set NewBacklogWB = Nothing
    Set NewBacklogWS = Nothing
    Set CURRENTWB = Nothing
    Set CURRENTSHEET = Nothing

End Sub

Sub CreateMail()
    
    Dim MyOutlookApp As Outlook.Application  ' - Early binding
    Dim Mymail As Outlook.MailItem ' - Early binding
    'Dim olApp As Object - ' Late binding
    'Dim olMail As Object - ' Late binding
    
    Dim besz As Long
    Dim Sendto As String
    Dim CCto As String
    Dim VendorName As String
    Dim Invocation As String
    Dim Language As String
    Dim MailSignature As String
    
     'Set olApp = GetObject(, "Outlook.application") - ' Late binding
     'Set olMail = olApp.CreateItem(0) - ' Late binding
     Let besz = Sheet2.Range("D1").Value
    'Let Sendto =
    'Let CCto = ""
    'Let VendorName =
   ' Let Invocation =
    'Let Language =
    
    
    Set MyOutlookApp = New Outlook.Application ' - Early binding
    Set Mymail = MyOutlookApp.CreateItem(olMailItem) ' - Early binding
    
    
            With Mymail
            Let MailSignature = .HTMLBody
            
                .BodyFormat = olFormatHTML
                .Display
                
                .To = "csaba.csontos@haldex.com"
                .CC = ""
                .Subject = "BACKLOG"
                .HTMLBody = MailSignature
                
            End With
   
End Sub

Sub GenerateMassBacklogXLSFiles()

    With Application
        .ScreenUpdating = False
        .DisplayAlerts = False
        .Calculation = xlCalculationManual
    End With

    Dim dict As Scripting.Dictionary
    Dim VendorArray As Variant
    Dim lastrow
    Dim r As Long
   
    Let lastrow = Sheet3.UsedRange.Rows.Count
    Let VendorArray = Sheet3.Range("B4", "B" & lastrow)
    Set dict = New Scripting.Dictionary
    
    For r = LBound(VendorArray) To UBound(VendorArray) Step 1
        dict.Add r, VendorArray(r, 1)
        Sheet2.Range("D1").Value = dict(r)
        Call GenerateBacklogXLSFiles
    Next r
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub


